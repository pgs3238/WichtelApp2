plugins {
    id 'java'
    id 'io.quarkus'
    id "com.github.node-gradle.node" version "3.5.0"
}

repositories {
    mavenCentral()
    mavenLocal()
}

node {
    // Version of node to use.
    version = '18.12.1'

    // Base URL for fetching node distributions (change if you have a mirror).
//    distBaseUrl = 'https://nodejs.org/dist'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    workDir = file("${project.projectDir}/src/main/frontend/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.projectDir}/src/main/frontend/npm")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/src/main/frontend")
}

task npmInstallDependencies(type: NpmTask) {
    dependsOn 'npmSetup'
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = 'src/main/frontend'
    }
    args = ['install']
}

task npmBuild(type: NpmTask) {
    dependsOn 'npmInstallDependencies'
    execOverrides {
//        it.ignoreExitValue = true
        it.workingDir = 'src/main/frontend'
    }
    args = ['run', 'build']
}

task copyFrontendToBuild(type: Copy) {
    dependsOn 'npmBuild'
    from "$projectDir/src/main/frontend/build/"
//    include "*"
    into "$buildDir/resources/main/META-INF/resources"
}

processResources {
    dependsOn 'copyFrontendToBuild'
}





dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-hibernate-orm'
    implementation 'io.quarkus:quarkus-hibernate-validator'
    //implementation 'io.quarkus:quarkus-resteasy-jsonb'
    implementation 'io.quarkus:quarkus-resteasy-reactive-jsonb'
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    //implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-resteasy-reactive'
    //implementation 'io.quarkus:quarkus-resteasy-mutiny'
    implementation 'io.quarkus:quarkus-security-jpa'
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-mailer'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'

}

group 'com.example'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}
